import time
import requests
from io import BytesIO
from telegram import Bot, Update
from flask import Flask, request
from telegram.ext import Updater, CommandHandler, CallbackContext
import threading
import os
import random
import string

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
TOKEN = os.getenv("TOKEN")
CHAT_ID = os.getenv("CHAT_ID")  # –¢–≤—ñ–π Telegram ID
TRACKING_URL = 'https://www.ups.com/track?loc=en_US&tracknum=1ZA0Y3156822543252'
# –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—ñ URL
def generate_unique_url():
    random_suffix = ''.join(random.choices(string.ascii_letters + string.digits, k=10))
    return f'https://image.thum.io/get/width/1000/{TRACKING_URL}?{random_suffix}'

last_status = ""

# --- Flask ---
app = Flask(__name__)

@app.route('/')
def index():
    return '–ë–æ—Ç –ø—Ä–∞—Ü—é—î!'

@app.route('/ping')
def ping():
    return 'OK'

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç—Ä–µ–∫—ñ–Ω–≥—É
def get_tracking_status():
    # –£ —Å–ø—Ä–æ—â–µ–Ω–æ–º—É –≤–∞—Ä—ñ–∞–Ω—Ç—ñ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ª—ñ–Ω–∫ —ñ —Ç–µ–∫—Å—Ç
    return f"–û—Å—å –ª—ñ–Ω–∫ –Ω–∞ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è:", TRACKING_URL

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –¥–ª—è —Ç—Ä–µ–∫—ñ–Ω–≥—É
def get_tracking_photo():
    url = generate_unique_url()
    response = requests.get(url)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if response.status_code == 200 and 'image' in response.headers['Content-Type']:
        return BytesIO(response.content)
    else:
        # –Ø–∫—â–æ —Ü–µ –Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –º–æ–∂–Ω–∞ –æ–±—Ä–æ–±–∏—Ç–∏ —è–∫ –ø–æ–º–∏–ª–∫—É –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —ñ–Ω—à–∏–π —Ç–∏–ø –¥–∞–Ω–∏—Ö
        print("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        return None

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
def send_tracking_update(bot: Bot):
    global last_status
    # –ü—Å–µ–≤–¥–æ-–æ–Ω–æ–≤–ª–µ–Ω–Ω—è, —Ç—É—Ç –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Å–∫—Ä–∞–ø—ñ–Ω–≥ –∞–±–æ API —è–∫—â–æ —Ç—Ä–µ–±–∞
    status_text, url = get_tracking_status()
    if status_text != last_status:
        last_status = status_text
        bot.send_message(chat_id=CHAT_ID, text=f"üöö –°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–∏–≤—Å—è: {status_text}\n{url}")
        photo = get_tracking_photo()
        if photo:
            bot.send_photo(chat_id=CHAT_ID, photo=photo)
        else:
            bot.send_message(chat_id=CHAT_ID, text="–ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ —Ç—Ä–µ–∫—ñ–Ω–≥—É.")

# --- –ö–æ–º–∞–Ω–¥–∏ ---
def status_command(update: Update, context: CallbackContext):
    status_text, url = get_tracking_status()
    update.message.reply_text(f"üì¶ –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å: {status_text}\n{url}")

def photo_command(update: Update, context: CallbackContext):
    photo = get_tracking_photo()
    if photo:
        update.message.reply_photo(photo=photo)
    else:
        update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–æ—Ç–æ.")

def info_command(update: Update, context: CallbackContext):
    update.message.reply_text(f"üîç –¢—Ä–µ–∫—ñ–Ω–≥ UPS:\n{TRACKING_URL}")

# --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ---
def start_bot():
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
    updater = Updater(token=TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("status", status_command))
    dispatcher.add_handler(CommandHandler("photo", photo_command))
    dispatcher.add_handler(CommandHandler("info", info_command))

    updater.start_polling()

# --- –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä—É —ñ –±–æ—Ç–∞ –æ–¥–Ω–æ—á–∞—Å–Ω–æ ---
def run():
    bot = Bot(token=TOKEN)
    threading.Thread(target=start_bot, daemon=True).start()

    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    app.run(host='0.0.0.0', port=3000)

    # –¶–∏–∫–ª –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    while True:
        try:
            send_tracking_update(bot)
            time.sleep(600)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
            time.sleep(600)  # –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ 10 —Ö–≤–∏–ª–∏–Ω

if __name__ == '__main__':
    run()
